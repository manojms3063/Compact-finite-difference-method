# import numpy as np
# import sympy as smp
# from sympy import symbols, sin, exp, diff, lambdify
# from scipy.sparse import diags
# import scipy
# import matplotlib.pyplot as plt
# import sympy as smp
# from sympy import symbols
    
# y = symbols("y")
# x = symbols("x")
# alpha = 0.5
# a = 0
# b = 1
# yL = 1
# yR =1 
# # print(x)
# # h = 0.00390625
# refx = np.array([0.        , 0.00390625, 0.0078125 , 0.01171875, 0.015625  ,
#         0.01953125, 0.0234375 , 0.02734375, 0.03125   , 0.03515625,
#         0.0390625 , 0.04296875, 0.046875  , 0.05078125, 0.0546875 ,
#         0.05859375, 0.0625    , 0.06640625, 0.0703125 , 0.07421875,
#         0.078125  , 0.08203125, 0.0859375 , 0.08984375, 0.09375   ,
#         0.09765625, 0.1015625 , 0.10546875, 0.109375  , 0.11328125,
#         0.1171875 , 0.12109375, 0.125     , 0.12890625, 0.1328125 ,
#         0.13671875, 0.140625  , 0.14453125, 0.1484375 , 0.15234375,
#         0.15625   , 0.16015625, 0.1640625 , 0.16796875, 0.171875  ,
#         0.17578125, 0.1796875 , 0.18359375, 0.1875    , 0.19140625,
#         0.1953125 , 0.19921875, 0.203125  , 0.20703125, 0.2109375 ,
#         0.21484375, 0.21875   , 0.22265625, 0.2265625 , 0.23046875,
#         0.234375  , 0.23828125, 0.2421875 , 0.24609375, 0.25      ,
#         0.25390625, 0.2578125 , 0.26171875, 0.265625  , 0.26953125,
#         0.2734375 , 0.27734375, 0.28125   , 0.28515625, 0.2890625 ,
#         0.29296875, 0.296875  , 0.30078125, 0.3046875 , 0.30859375,
#         0.3125    , 0.31640625, 0.3203125 , 0.32421875, 0.328125  ,
#         0.33203125, 0.3359375 , 0.33984375, 0.34375   , 0.34765625,
#         0.3515625 , 0.35546875, 0.359375  , 0.36328125, 0.3671875 ,
#         0.37109375, 0.375     , 0.37890625, 0.3828125 , 0.38671875,
#         0.390625  , 0.39453125, 0.3984375 , 0.40234375, 0.40625   ,
#         0.41015625, 0.4140625 , 0.41796875, 0.421875  , 0.42578125,
#         0.4296875 , 0.43359375, 0.4375    , 0.44140625, 0.4453125 ,
#         0.44921875, 0.453125  , 0.45703125, 0.4609375 , 0.46484375,
#         0.46875   , 0.47265625, 0.4765625 , 0.48046875, 0.484375  ,
#         0.48828125, 0.4921875 , 0.49609375, 0.5       , 0.50390625,
#         0.5078125 , 0.51171875, 0.515625  , 0.51953125, 0.5234375 ,
#         0.52734375, 0.53125   , 0.53515625, 0.5390625 , 0.54296875,
#         0.546875  , 0.55078125, 0.5546875 , 0.55859375, 0.5625    ,
#         0.56640625, 0.5703125 , 0.57421875, 0.578125  , 0.58203125,
#         0.5859375 , 0.58984375, 0.59375   , 0.59765625, 0.6015625 ,
#         0.60546875, 0.609375  , 0.61328125, 0.6171875 , 0.62109375,
#         0.625     , 0.62890625, 0.6328125 , 0.63671875, 0.640625  ,
#         0.64453125, 0.6484375 , 0.65234375, 0.65625   , 0.66015625,
#         0.6640625 , 0.66796875, 0.671875  , 0.67578125, 0.6796875 ,
#         0.68359375, 0.6875    , 0.69140625, 0.6953125 , 0.69921875,
#         0.703125  , 0.70703125, 0.7109375 , 0.71484375, 0.71875   ,
#         0.72265625, 0.7265625 , 0.73046875, 0.734375  , 0.73828125,
#         0.7421875 , 0.74609375, 0.75      , 0.75390625, 0.7578125 ,
#         0.76171875, 0.765625  , 0.76953125, 0.7734375 , 0.77734375,
#         0.78125   , 0.78515625, 0.7890625 , 0.79296875, 0.796875  ,
#         0.80078125, 0.8046875 , 0.80859375, 0.8125    , 0.81640625,
#         0.8203125 , 0.82421875, 0.828125  , 0.83203125, 0.8359375 ,
#         0.83984375, 0.84375   , 0.84765625, 0.8515625 , 0.85546875,
#         0.859375  , 0.86328125, 0.8671875 , 0.87109375, 0.875     ,
#         0.87890625, 0.8828125 , 0.88671875, 0.890625  , 0.89453125,
#         0.8984375 , 0.90234375, 0.90625   , 0.91015625, 0.9140625 ,
#         0.91796875, 0.921875  , 0.92578125, 0.9296875 , 0.93359375,
#         0.9375    , 0.94140625, 0.9453125 , 0.94921875, 0.953125  ,
#         0.95703125, 0.9609375 , 0.96484375, 0.96875   , 0.97265625,
#         0.9765625 , 0.98046875, 0.984375  , 0.98828125, 0.9921875 ,
#         0.99609375, 1.        ])



# ref = np.array([7.31854454e-05, 7.31849055e-05, 7.31797465e-05, 7.31725379e-05,
#         7.31636781e-05, 7.31533238e-05, 7.31415552e-05, 7.31284194e-05,
#         7.31139456e-05, 7.30981525e-05, 7.30810520e-05, 7.30626516e-05,
#         7.30429553e-05, 7.30219648e-05, 7.29996800e-05, 7.29760994e-05,
#         7.29512202e-05, 7.29250389e-05, 7.28975510e-05, 7.28687515e-05,
#         7.28386348e-05, 7.28071949e-05, 7.27744254e-05, 7.27403195e-05,
#         7.27048701e-05, 7.26680697e-05, 7.26299108e-05, 7.25903855e-05,
#         7.25494857e-05, 7.25072031e-05, 7.24635294e-05, 7.24184559e-05,
#         7.23719738e-05, 7.23240742e-05, 7.22747481e-05, 7.22239863e-05,
#         7.21717796e-05, 7.21181184e-05, 7.20629933e-05, 7.20063947e-05,
#         7.19483128e-05, 7.18887377e-05, 7.18276595e-05, 7.17650681e-05,
#         7.17009535e-05, 7.16353054e-05, 7.15681134e-05, 7.14993672e-05,
#         7.14290563e-05, 7.13571701e-05, 7.12836979e-05, 7.12086290e-05,
#         7.11319525e-05, 7.10536575e-05, 7.09737331e-05, 7.08921682e-05,
#         7.08089515e-05, 7.07240719e-05, 7.06375181e-05, 7.05492786e-05,
#         7.04593421e-05, 7.03676968e-05, 7.02743313e-05, 7.01792338e-05,
#         7.00823926e-05, 6.99837957e-05, 6.98834313e-05, 6.97812873e-05,
#         6.96773517e-05, 6.95716122e-05, 6.94640567e-05, 6.93546728e-05,
#         6.92434482e-05, 6.91303703e-05, 6.90154266e-05, 6.88986045e-05,
#         6.87798913e-05, 6.86592742e-05, 6.85367404e-05, 6.84122768e-05,
#         6.82858706e-05, 6.81575085e-05, 6.80271775e-05, 6.78948642e-05,
#         6.77605554e-05, 6.76242377e-05, 6.74858976e-05, 6.73455214e-05,
#         6.72030956e-05, 6.70586064e-05, 6.69120401e-05, 6.67633827e-05,
#         6.66126203e-05, 6.64597388e-05, 6.63047241e-05, 6.61475620e-05,
#         6.59882383e-05, 6.58267384e-05, 6.56630480e-05, 6.54971526e-05,
#         6.53290375e-05, 6.51586880e-05, 6.49860893e-05, 6.48112265e-05,
#         6.46340847e-05, 6.44546489e-05, 6.42729039e-05, 6.40888344e-05,
#         6.39024253e-05, 6.37136610e-05, 6.35225262e-05, 6.33290053e-05,
#         6.31330825e-05, 6.29347423e-05, 6.27339687e-05, 6.25307458e-05,
#         6.23250577e-05, 6.21168882e-05, 6.19062212e-05, 6.16930404e-05,
#         6.14773293e-05, 6.12590717e-05, 6.10382508e-05, 6.08148501e-05,
#         6.05888529e-05, 6.03602423e-05, 6.01290013e-05, 5.98951131e-05,
#         5.96585604e-05, 5.94193261e-05, 5.91773928e-05, 5.89327433e-05,
#         5.86853599e-05, 5.84352251e-05, 5.81823213e-05, 5.79266306e-05,
#         5.76681352e-05, 5.74068170e-05, 5.71426581e-05, 5.68756401e-05,
#         5.66057450e-05, 5.63329542e-05, 5.60572494e-05, 5.57786118e-05,
#         5.54970230e-05, 5.52124640e-05, 5.49249159e-05, 5.46343599e-05,
#         5.43407768e-05, 5.40441474e-05, 5.37444524e-05, 5.34416724e-05,
#         5.31357879e-05, 5.28267793e-05, 5.25146268e-05, 5.21993107e-05,
#         5.18808109e-05, 5.15591074e-05, 5.12341802e-05, 5.09060088e-05,
#         5.05745730e-05, 5.02398522e-05, 4.99018258e-05, 4.95604732e-05,
#         4.92157734e-05, 4.88677057e-05, 4.85162489e-05, 4.81613818e-05,
#         4.78030833e-05, 4.74413318e-05, 4.70761059e-05, 4.67073840e-05,
#         4.63351443e-05, 4.59593650e-05, 4.55800241e-05, 4.51970994e-05,
#         4.48105689e-05, 4.44204101e-05, 4.40266006e-05, 4.36291179e-05,
#         4.32279392e-05, 4.28230417e-05, 4.24144025e-05, 4.20019986e-05,
#         4.15858066e-05, 4.11658034e-05, 4.07419655e-05, 4.03142694e-05,
#         3.98826912e-05, 3.94472073e-05, 3.90077938e-05, 3.85644264e-05,
#         3.81170811e-05, 3.76657334e-05, 3.72103591e-05, 3.67509333e-05,
#         3.62874316e-05, 3.58198289e-05, 3.53481003e-05, 3.48722208e-05,
#         3.43921649e-05, 3.39079075e-05, 3.34194229e-05, 3.29266855e-05,
#         3.24296695e-05, 3.19283489e-05, 3.14226978e-05, 3.09126898e-05,
#         3.03982988e-05, 2.98794980e-05, 2.93562611e-05, 2.88285611e-05,
#         2.82963712e-05, 2.77596644e-05, 2.72184134e-05, 2.66725908e-05,
#         2.61221693e-05, 2.55671212e-05, 2.50074187e-05, 2.44430339e-05,
#         2.38739388e-05, 2.33001050e-05, 2.27215043e-05, 2.21381081e-05,
#         2.15498878e-05, 2.09568146e-05, 2.03588594e-05, 1.97559932e-05,
#         1.91481867e-05, 1.85354105e-05, 1.79176349e-05, 1.72948303e-05,
#         1.66669667e-05, 1.60340141e-05, 1.53959422e-05, 1.47527208e-05,
#         1.41043193e-05, 1.34507069e-05, 1.27918529e-05, 1.21277262e-05,
#         1.14582956e-05, 1.07835299e-05, 1.01033974e-05, 9.41786662e-06,
#         8.72690561e-06, 8.03048240e-06, 7.32856482e-06, 6.62112053e-06,
#         5.90811703e-06, 5.18952164e-06, 4.46530151e-06, 3.73542362e-06,
#         2.99985478e-06, 2.25856162e-06, 1.51151062e-06, 7.58668037e-07])


# # n =  2**3
# for itr in range(2,8):
#     n = 2**itr
#     # print("n",n)
#     h=(b-a)/n
#     # print('h',h)
    
#     # h = 1/2
#     # n = int(b-a/h)+1
    
#     Ht2 = 0.5
#     # print(h)
#     # c = 0.1
    
    
#     X=np.linspace(a,b,n+1)
#     # print('x',X)
#     # print("x",X)
#     Refs = np.zeros(len(X)-1)
#     for i in range(len(X)-1):
#         k = X[i]
#         index = np.where(refx == k)[0][0]
#         # print(f"The index of {k} in ref X = {index}")
#         SS = ref[index]
#         # print(SS)
#         Refs[i] = SS
#     # print("REFS",Refs)
#     # Refs = np.zeros(len(X))
#     # for R in range(len(X)):
#     #     Refs[R] = SS
    
    
    
    
#     f = -Ht2*(1-(y/(1-alpha*y)))
#     # print(f)
#     f_fun = smp.lambdify(y,f)
#     u0y = f/2
#     uxy = f
    
    
    
#     # intial guess for Quassilinirization 
    
#     # y0x = 
#     Y = np.zeros(n+1)
#     Yi = np.zeros(n+1)
#     # mu = np.zeros(n+1)
#     # for i in range(0,n+1):
#         # mu[i] = ((1+c)**(X[i])-1)/(c)
#     # print("mu",mu)
#     # hb = np.zeros(n+1)
#     # hf = np.zeros(n+1)
#     # for i in range(1,n+1):
#     #     h = mu[i-1]-mu[i]
#     # for i in range(0,n):
#         # hf[i+1] = mu[i+1]-mu[i]
#     # hf[0]=hf[1]
#         # hf[n] = 0.17A
#     # hf = np.zeros(n+1)
#     # for i in range(n+1):
#     #     h = h
#     # hb = hf
#     # print("hb",hb)
#     # print("hf",hf)
    
#     M1 = 1/x
#     #numerical values of M 
#     M_fun = smp.lambdify(x,M1)
#     M = np.zeros(n+1)
    
#     for i in range(n+1):
#         if X[i]!=0:
#             M[i] = M_fun(X[i])
    
#             # M[i] = 1/X[i]
#         else:
#             M[i]=0
#     # print("M",M)    
      
#     # Frist Derivative of M = Md1
#     Md1 = smp.diff(M1,x)
#     Md1_fun =smp.lambdify(x,Md1)
#     # print(Md1)
#     Md2 = smp.diff(Md1,x)
#     Md2_fun =smp.lambdify(x,Md2)
    
#     Md1 = np.zeros(n+1)
#     Md2 = np.zeros(n+1)
#     # print(Md2)
#     for i in range(n+1):
#         if X[i]!=0:
#                 Md1[i] = Md1_fun(X[i])
#                 Md2[i] = Md2_fun(X[i])
#                 # M[i] = 1/X[i]
#         else:
#             Md1[i]=0
#             Md2[i]=0
    
        
    
#     Y = np.zeros(n)
#     Y0 = np.zeros(n)
#     # print(Y)
#     Y1 = np.zeros(n+1)
#     Y2 = np.zeros(n+1)
#     uy1 = np.zeros(n+1)
#     uy2 = np.zeros(n+1)
#     u1 = np.zeros(n+1)
#     Vt1 = np.zeros(n+1)
#     Vt2 = np.zeros(n+1)
#     Ut1 = np.zeros(n+1)
#     Ut2 = np.zeros(n+1)
    
#     for i in range(n):
#         Y0[i] = 1/(1+alpha)
    
#     for l in range(5):
#         for i in range(n): 
#             # Y0[i] = 1/(1+alpha)
#             # Y0 = np.array([0.0090162 ,0.01068306 ,0.01205378 ,0.00906355])
            
#             Y[i] = -Ht2*(1-(Y0[i]/1-alpha*Y0[i]))
        
#             uy1[i] = Ht2/(1-alpha*Y[i]**2)
#             uy2[i] = 2*alpha*((1-alpha*Y[i])*Y2[i]+3*alpha*Y1[i]**2)/(1-alpha*Y[i])**4
#             u1[i] = Ht2*(Y1[i])/(1-alpha*Y[i])**2
#             # 
#         # Y = Yi
#         # Y = np.array([0.14206078,0.13517144,0.39992203,0.90909091])
#         # print("1",Y)
#         Ut = np.zeros(n)
#         Vt = np.zeros(n)
#         for i in range(1,n):
#             Ut[i] = Ht2/(1-alpha*Y[i])**2
#             Ut[0] = Ht2/(1-alpha*Y[0])**2*(0.5)
#             Ut1[i-1] = Ut[i]-Ut[i-1]
#             Ut2[i-1] = Ut1[i]-Ut1[i-1]
#             # Ut1 = np.array([0.2455157,0,0,0,0,0])
#             # Ut2 = np.array([-0.2455157,0,0,0,0,0])
            
#             Vt[i] = f_fun(Y[i]) -Y[i]*Ht2/(1-alpha*Y[i])**2
#             Vt[0] = (f_fun(Y[0]))/2 -Y[0]*Ht2/(1-alpha*Y[0])**2
#             Vt1[i-1] = Vt[i]-Vt[i-1]
#             Vt2[i-1] =  Vt1[i]-Vt1[i-1]
#             # Vt1 = np.array([-0.27252252,0,0,0,0,0])
#             # Vt2 = np.array([0.27252252,0,0,0,0,0])
            
#         # values of ai,bi,ci,di
#         ai = np.zeros(n)
#         bi= np.zeros(n)
#         ci= np.zeros(n)
#         di= np.zeros(n)
#         for i in range (0,n):
#             # ai[i] = 6 / (5 * h**2) - (3 * M[i]) / (4 * h)
#             # bi[i] = 12 / (5 * h**2) + Ut[i]
#             # ci[i] = 6 / (5 * h**2) + (3 * M[i]) / (4 * h)
#             di[i] = Vt[i]
           
#         # for tridiagonal system 
#         p = np.zeros(n)
#         q = np.zeros(n)
#         r = np.zeros(n)
#         s = np.zeros(n)
#         rt = np.zeros(n)
#         st = np.zeros(n)
        
#         for i in range(0,n):
#             p[i] = ai[i]/(h**2)
#             q[i] = -bi[i]/(2*h)
            
#         # for i in range(1,n-1):
#             r[i] = -2*ai[i]/(h**2)
#             # rt[i] = 2*ai[i]/(h*(h+hf[i+1]))
#             # s[i] = bi[i]*hf[i+1]/(h*(h+hf[i+1]))
#             # st[i] = bi[i]*h/(hf[i+1]*(h+hf[i+1]))
        
#         vi = np.zeros(n)
#         wi = np.zeros(n)
#         wti = np.zeros(n)
#         for i in range(n):
#             # vi[i] = r[i]+ci[i]
#             vi[i] = 12 / (5 * h**2) + Ut[i]
#             # wti[i] = p[i]+q[i]
#             wti[i] = 6 / (5 * h**2) + (3 * M[i]) / (4 * h)
#         for i in range(1,n):
#             # wi[i-1] = p[i]-q[i]
#             wi[i-1] = 6 / (5 * h**2) - (3 * M[i]) / (4 * h)
            
        
#         # Sparse matrix A setup
#         A = diags([wi, vi, wti], [-1,0,1], shape=(n, n)).toarray()
#         A[0,1] = 2*ai[0]/h**2
#     # print(A)
    
#         R= np.zeros(n)
#         for i in range(n):
#             R[i] = -di[i]    
#         S = np.linalg.solve(A,R)
#         Y0 = S
#     # print("S",Y0)
#     # ref = max(S)
#     # ref =abs(0.011301419027215123-max(S))
#     # print('ref',ref)
#     # Adjust X to match the dimensions of S
    
    
    
#     E = max(abs(Refs-Y0))
#     print(f"The Error on h = {h} is {E}")
    
    
    
     
#     plt.figure(figsize=(8, 6))
#     plt.plot(X[:n], S, marker='o', linestyle='-', color='b', label="Solution S")
#     plt.xlabel("x")
#     plt.ylabel("S (Solution)")
#     plt.title("Numerical Solution")
#     plt.legend()
#     plt.grid()
#     plt.show()














# _____________________________________________________________

# import numpy as np 

# # r = np.array([0.05980198,0.05850983305785109,0.05089890342459491,0.03250444850700472,0.0])
# # a1 = np.array([0.07977774, 0.07406837,0.0614425,0.03782562,0.0])

# # E = max(abs(r-a1))

# # # 0.019975760000000002


# r = np.array([0.05980198198527513,0.05959887624729718,0.05850983305785109,0.05580885423315288,0.05089890342459491,0.043276147592111784,0.03250444850700472,0.01819657599816907,0.0])
# a2 = np.array([0.07017626,0.06876637,0.06640465,0.062406,0.05618576,0.04724611,0.03515385,0.01952276,0.0])

# E = max(abs(r-a2))
# # 0.010374278014724875

# # x [0.    0.125 0.25  0.375 0.5   0.625 0.75  0.875 1.   ]

# _______________________________________________________________

# import numpy as np

# array = np.arange(0, 1.001, 0.00390625)
# k = 0.625
# index = np.where(array == k)[0][0]
# print(f"The index of 0.625 is {index}")

#______________________________________________________
import math


E1 = 0.006825399085761262
h1 = 0.05
E2 = 0.007117390686987524
h2 = 0.5

# Function to calculate the order of the scheme
def calculate_order(E1, h1, E2, h2):
    return math.log(E1 / E2) / math.log(h1 / h2)

# Calculate and print the order
order = calculate_order(E1, h1, E2, h2)
print("The order of the scheme is:", order)

