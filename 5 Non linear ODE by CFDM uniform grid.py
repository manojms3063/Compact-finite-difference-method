import numpy as np
import sympy as smp
from sympy import symbols, sin, exp, diff, lambdify
from scipy.sparse import diags
import scipy
import matplotlib.pyplot as plt
import sympy as smp
from sympy import symbols
    
y = symbols("y")
x = symbols("x")
alpha = 16
a = 0
b = 1
yL = 1
yR =1 
# print(x)
# h = 0.00390625
refx = np.array([0.        , 0.00390625, 0.0078125 , 0.01171875, 0.015625  ,
       0.01953125, 0.0234375 , 0.02734375, 0.03125   , 0.03515625,
       0.0390625 , 0.04296875, 0.046875  , 0.05078125, 0.0546875 ,
       0.05859375, 0.0625    , 0.06640625, 0.0703125 , 0.07421875,
       0.078125  , 0.08203125, 0.0859375 , 0.08984375, 0.09375   ,
       0.09765625, 0.1015625 , 0.10546875, 0.109375  , 0.11328125,
       0.1171875 , 0.12109375, 0.125     , 0.12890625, 0.1328125 ,
       0.13671875, 0.140625  , 0.14453125, 0.1484375 , 0.15234375,
       0.15625   , 0.16015625, 0.1640625 , 0.16796875, 0.171875  ,
       0.17578125, 0.1796875 , 0.18359375, 0.1875    , 0.19140625,
       0.1953125 , 0.19921875, 0.203125  , 0.20703125, 0.2109375 ,
       0.21484375, 0.21875   , 0.22265625, 0.2265625 , 0.23046875,
       0.234375  , 0.23828125, 0.2421875 , 0.24609375, 0.25      ,
       0.25390625, 0.2578125 , 0.26171875, 0.265625  , 0.26953125,
       0.2734375 , 0.27734375, 0.28125   , 0.28515625, 0.2890625 ,
       0.29296875, 0.296875  , 0.30078125, 0.3046875 , 0.30859375,
       0.3125    , 0.31640625, 0.3203125 , 0.32421875, 0.328125  ,
       0.33203125, 0.3359375 , 0.33984375, 0.34375   , 0.34765625,
       0.3515625 , 0.35546875, 0.359375  , 0.36328125, 0.3671875 ,
       0.37109375, 0.375     , 0.37890625, 0.3828125 , 0.38671875,
       0.390625  , 0.39453125, 0.3984375 , 0.40234375, 0.40625   ,
       0.41015625, 0.4140625 , 0.41796875, 0.421875  , 0.42578125,
       0.4296875 , 0.43359375, 0.4375    , 0.44140625, 0.4453125 ,
       0.44921875, 0.453125  , 0.45703125, 0.4609375 , 0.46484375,
       0.46875   , 0.47265625, 0.4765625 , 0.48046875, 0.484375  ,
       0.48828125, 0.4921875 , 0.49609375, 0.5       , 0.50390625,
       0.5078125 , 0.51171875, 0.515625  , 0.51953125, 0.5234375 ,
       0.52734375, 0.53125   , 0.53515625, 0.5390625 , 0.54296875,
       0.546875  , 0.55078125, 0.5546875 , 0.55859375, 0.5625    ,
       0.56640625, 0.5703125 , 0.57421875, 0.578125  , 0.58203125,
       0.5859375 , 0.58984375, 0.59375   , 0.59765625, 0.6015625 ,
       0.60546875, 0.609375  , 0.61328125, 0.6171875 , 0.62109375,
       0.625     , 0.62890625, 0.6328125 , 0.63671875, 0.640625  ,
       0.64453125, 0.6484375 , 0.65234375, 0.65625   , 0.66015625,
       0.6640625 , 0.66796875, 0.671875  , 0.67578125, 0.6796875 ,
       0.68359375, 0.6875    , 0.69140625, 0.6953125 , 0.69921875,
       0.703125  , 0.70703125, 0.7109375 , 0.71484375, 0.71875   ,
       0.72265625, 0.7265625 , 0.73046875, 0.734375  , 0.73828125,
       0.7421875 , 0.74609375, 0.75      , 0.75390625, 0.7578125 ,
       0.76171875, 0.765625  , 0.76953125, 0.7734375 , 0.77734375,
       0.78125   , 0.78515625, 0.7890625 , 0.79296875, 0.796875  ,
       0.80078125, 0.8046875 , 0.80859375, 0.8125    , 0.81640625,
       0.8203125 , 0.82421875, 0.828125  , 0.83203125, 0.8359375 ,
       0.83984375, 0.84375   , 0.84765625, 0.8515625 , 0.85546875,
       0.859375  , 0.86328125, 0.8671875 , 0.87109375, 0.875     ,
       0.87890625, 0.8828125 , 0.88671875, 0.890625  , 0.89453125,
       0.8984375 , 0.90234375, 0.90625   , 0.91015625, 0.9140625 ,
       0.91796875, 0.921875  , 0.92578125, 0.9296875 , 0.93359375,
       0.9375    , 0.94140625, 0.9453125 , 0.94921875, 0.953125  ,
       0.95703125, 0.9609375 , 0.96484375, 0.96875   , 0.97265625,
       0.9765625 , 0.98046875, 0.984375  , 0.98828125, 0.9921875 ,
       0.99609375, 1.        ])



ref = np.array([0.05980198, 0.0598006 , 0.05979919, 0.05979772, 0.05979615,
       0.05979446, 0.05979263, 0.05979061, 0.05978837, 0.0597859 ,
       0.05978316, 0.05978013, 0.05977676, 0.05977305, 0.05976895,
       0.05976443, 0.05975949, 0.05975407, 0.05974816, 0.05974174,
       0.05973476, 0.05972721, 0.05971906, 0.05971029, 0.05970086,
       0.05969076, 0.05967995, 0.05966841, 0.05965611, 0.05964304,
       0.05962915, 0.05961444, 0.05959888, 0.05958243, 0.05956508,
       0.0595468 , 0.05952757, 0.05950736, 0.05948616, 0.05946393,
       0.05944065, 0.05941631, 0.05939087, 0.05936431, 0.05933662,
       0.05930776, 0.05927772, 0.05924648, 0.05921401, 0.05918028,
       0.05914529, 0.059109  , 0.05907139, 0.05903245, 0.05899215,
       0.05895047, 0.05890739, 0.05886289, 0.05881694, 0.05876953,
       0.05872064, 0.05867025, 0.05861833, 0.05856486, 0.05850983,
       0.05845322, 0.058395  , 0.05833516, 0.05827368, 0.05821053,
       0.0581457 , 0.05807917, 0.05801091, 0.05794092, 0.05786917,
       0.05779564, 0.05772032, 0.05764318, 0.05756421, 0.05748339,
       0.05740069, 0.05731611, 0.05722963, 0.05714122, 0.05705087,
       0.05695856, 0.05686427, 0.05676799, 0.05666969, 0.05656937,
       0.056467  , 0.05636257, 0.05625605, 0.05614744, 0.05603672,
       0.05592386, 0.05580885, 0.05569168, 0.05557233, 0.05545078,
       0.05532702, 0.05520103, 0.05507279, 0.05494229, 0.05480951,
       0.05467443, 0.05453705, 0.05439733, 0.05425528, 0.05411087,
       0.05396409, 0.05381491, 0.05366334, 0.05350934, 0.05335291,
       0.05319403, 0.05303269, 0.05286886, 0.05270254, 0.05253371,
       0.05236236, 0.05218847, 0.05201202, 0.05183301, 0.05165141,
       0.05146722, 0.05128041, 0.05109098, 0.0508989 , 0.05070418,
       0.05050678, 0.0503067 , 0.05010392, 0.04989844, 0.04969022,
       0.04947927, 0.04926557, 0.0490491 , 0.04882985, 0.04860781,
       0.04838296, 0.04815529, 0.04792479, 0.04769144, 0.04745522,
       0.04721614, 0.04697417, 0.0467293 , 0.04648151, 0.0462308 ,
       0.04597715, 0.04572054, 0.04546097, 0.04519843, 0.04493289,
       0.04466435, 0.04439279, 0.04411821, 0.04384058, 0.0435599 ,
       0.04327615, 0.04298932, 0.0426994 , 0.04240638, 0.04211024,
       0.04181097, 0.04150856, 0.041203  , 0.04089428, 0.04058237,
       0.04026728, 0.03994899, 0.03962748, 0.03930275, 0.03897478,
       0.03864356, 0.03830908, 0.03797133, 0.03763029, 0.03728596,
       0.03693832, 0.03658736, 0.03623307, 0.03587544, 0.03551445,
       0.0351501 , 0.03478237, 0.03441126, 0.03403674, 0.03365881,
       0.03327746, 0.03289268, 0.03250445, 0.03211276, 0.03171761,
       0.03131898, 0.03091686, 0.03051124, 0.03010211, 0.02968945,
       0.02927327, 0.02885353, 0.02843024, 0.02800339, 0.02757296,
       0.02713894, 0.02670132, 0.02626009, 0.02581524, 0.02536676,
       0.02491463, 0.02445886, 0.02399942, 0.02353631, 0.02306951,
       0.02259902, 0.02212482, 0.02164691, 0.02116526, 0.02067989,
       0.02019076, 0.01969788, 0.01920123, 0.0187008 , 0.01819658,
       0.01768856, 0.01717673, 0.01666108, 0.0161416 , 0.01561828,
       0.01509111, 0.01456008, 0.01402517, 0.01348639, 0.01294371,
       0.01239714, 0.01184665, 0.01129224, 0.01073389, 0.01017161,
       0.00960537, 0.00903517, 0.008461  , 0.00788285, 0.0073007 ,
       0.00671456, 0.0061244 , 0.00553022, 0.00493201, 0.00432976,
       0.00372345, 0.00311309, 0.00249865, 0.00188013, 0.00125753,
       0.00063082,0])



# n =  2**3
for itr in range(2,8):
    n = 2**itr
    # print("n",n)
    h=(b-a)/n
    # print('h',h)
    
    # h = 1/2
    # n = int(b-a/h)+1
    
    Ht2 = 0.5
    # print(h)
    # c = 0.1
    
    
    X=np.linspace(a,b,n+1)
    # print('x',X)
    # print("x",X)
    Refs = np.zeros(len(X)-1)
    for i in range(len(X)-1):
        k = X[i]
        index = np.where(refx == k)[0][0]
        # print(f"The index of {k} in ref X = {index}")
        SS = ref[index]
        # print(SS)
        Refs[i] = SS
    # print("REFS",Refs)
    # Refs = np.zeros(len(X))
    # for R in range(len(X)):
    #     Refs[R] = SS
    
    
    
    
    f = -Ht2*(1-(y/(1-alpha*y)))
    # print(f)
    f_fun = smp.lambdify(y,f)
    u0y = f/2
    uxy = f
    
    
    
    # intial guess for Quassilinirization 
    
    # y0x = 
    Y = np.zeros(n+1)
    Yi = np.zeros(n+1)
    # mu = np.zeros(n+1)
    # for i in range(0,n+1):
        # mu[i] = ((1+c)**(X[i])-1)/(c)
    # print("mu",mu)
    # hb = np.zeros(n+1)
    # hf = np.zeros(n+1)
    # for i in range(1,n+1):
    #     h = mu[i-1]-mu[i]
    # for i in range(0,n):
        # hf[i+1] = mu[i+1]-mu[i]
    # hf[0]=hf[1]
        # hf[n] = 0.17A
    # hf = np.zeros(n+1)
    # for i in range(n+1):
    #     h = h
    # hb = hf
    # print("hb",hb)
    # print("hf",hf)
    
    M1 = 1/x
    #numerical values of M 
    M_fun = smp.lambdify(x,M1)
    M = np.zeros(n+1)
    
    for i in range(n+1):
        if X[i]!=0:
            M[i] = M_fun(X[i])
    
            # M[i] = 1/X[i]
        else:
            M[i]=0
    # print("M",M)    
      
    # Frist Derivative of M = Md1
    Md1 = smp.diff(M1,x)
    Md1_fun =smp.lambdify(x,Md1)
    # print(Md1)
    Md2 = smp.diff(Md1,x)
    Md2_fun =smp.lambdify(x,Md2)
    
    Md1 = np.zeros(n+1)
    Md2 = np.zeros(n+1)
    # print(Md2)
    for i in range(n+1):
        if X[i]!=0:
                Md1[i] = Md1_fun(X[i])
                Md2[i] = Md2_fun(X[i])
                # M[i] = 1/X[i]
        else:
            Md1[i]=0
            Md2[i]=0
    
        
    
    Y = np.zeros(n)
    Y0 = np.zeros(n)
    # print(Y)
    Y1 = np.zeros(n+1)
    Y2 = np.zeros(n+1)
    uy1 = np.zeros(n+1)
    uy2 = np.zeros(n+1)
    u1 = np.zeros(n+1)
    Vt1 = np.zeros(n+1)
    Vt2 = np.zeros(n+1)
    Ut1 = np.zeros(n+1)
    Ut2 = np.zeros(n+1)
    
    for i in range(n):
        Y0[i] = 1/(1+alpha)
    
    for l in range(5):
        for i in range(n): 
            # Y0[i] = 1/(1+alpha)
            # Y0 = np.array([0.0090162 ,0.01068306 ,0.01205378 ,0.00906355])
            
            Y[i] = -Ht2*(1-(Y0[i]/1-alpha*Y0[i]))
        
            uy1[i] = Ht2/(1-alpha*Y[i]**2)
            uy2[i] = 2*alpha*((1-alpha*Y[i])*Y2[i]+3*alpha*Y1[i]**2)/(1-alpha*Y[i])**4
            u1[i] = Ht2*(Y1[i])/(1-alpha*Y[i])**2
            # 
        # Y = Yi
        # Y = np.array([0.14206078,0.13517144,0.39992203,0.90909091])
        # print("1",Y)
        Ut = np.zeros(n)
        Vt = np.zeros(n)
        for i in range(1,n):
            Ut[i] = Ht2/(1-alpha*Y[i])**256
            Ut[0] = Ht2/(1-alpha*Y[0])**2*(0.5)
            Ut1[i-1] = Ut[i]-Ut[i-1]
            Ut2[i-1] = Ut1[i]-Ut1[i-1]
            # Ut1 = np.array([0.2455157,0,0,0,0,0])
            # Ut2 = np.array([-0.2455157,0,0,0,0,0])
            
            Vt[i] = f_fun(Y[i]) -Y[i]*Ht2/(1-alpha*Y[i])**2
            Vt[0] = (f_fun(Y[0]))/2 -Y[0]*Ht2/(1-alpha*Y[0])**2
            Vt1[i-1] = Vt[i]-Vt[i-1]
            Vt2[i-1] =  Vt1[i]-Vt1[i-1]
            # Vt1 = np.array([-0.27252252,0,0,0,0,0])
            # Vt2 = np.array([0.27252252,0,0,0,0,0])
            
        # values of ai,bi,ci,di
        ai = np.zeros(n)
        bi= np.zeros(n)
        ci= np.zeros(n)
        di= np.zeros(n)
        for i in range (0,n):
           ai[i] = 1-(h**2/12)*M[i]**2+(h**2/12)*Ut[i]+(h**2/12)*(2*Md1[i])+M[i]+(M[i]**2)*(h**2/6)
           bi[i] = -(h**2/12)*M[i]*Md1[i]+(h**2/12)*M[i]*Ut[i]-(h**2/12)*(2*Ut1[i])+(h**2/12)*Md2[i]-(h**2/6)*Ut[i]+(h**2/6)*Md1[i]
           ci[i] = (h**2/12)*M[i]*Vt1[i]-(h**2/12)*Vt2[i]-(h**2/6)*Ut1[i]-Ut[i]
           di[i] = (h**2/12)*(-M[i]*Vt1[i])+(h**2/12)*Vt2[i]-(h**2/6)*Vt1[i]-Vt[i] 
           
        # for tridiagonal system 
        p = np.zeros(n)
        q = np.zeros(n)
        r = np.zeros(n)
        s = np.zeros(n)
        rt = np.zeros(n)
        st = np.zeros(n)
        
        for i in range(0,n):
            p[i] = ai[i]/(h**2)
            q[i] = -bi[i]/(2*h)
            
        # for i in range(1,n-1):
            r[i] = -2*ai[i]/(h**2)
            # rt[i] = 2*ai[i]/(h*(h+hf[i+1]))
            # s[i] = bi[i]*hf[i+1]/(h*(h+hf[i+1]))
            # st[i] = bi[i]*h/(hf[i+1]*(h+hf[i+1]))
        
        vi = np.zeros(n)
        wi = np.zeros(n)
        wti = np.zeros(n)
        for i in range(n):
            vi[i] = r[i]+ci[i]
            wti[i] = p[i]+q[i]
        for i in range(1,n):
            wi[i-1] = p[i]-q[i]
            
        
        # Sparse matrix A setup
        A = diags([wi, vi, wti], [-1,0,1], shape=(n,n)).toarray()
        A[0,1] = 2*ai[0]/h**2
    # print(A)
    
        R= np.zeros(n)
        for i in range(n):
            R[i] = -di[i]    
        S = np.linalg.solve(A,R)
        Y0 = S
    # print("S",Y0)
    # ref = max(S)
    # ref =abs(0.011301419027215123-max(S))
    # print('ref',ref)
    # Adjust X to match the dimensions of S
    
    
    
    E = max(abs(Refs-Y0))
    print(f"The Error on h = {h} is {E}")
    
    
    
     
    plt.figure(figsize=(8, 6))
    plt.plot(X[:n], S, marker='o', linestyle='-', color='b', label="Solution S")
    plt.xlabel("x")
    plt.ylabel("S (Solution)")
    plt.title("Numerical Solution")
    plt.legend()
    plt.grid()
    plt.show()














# _____________________________________________________________

# import numpy as np 

# # r = np.array([0.05980198,0.05850983305785109,0.05089890342459491,0.03250444850700472,0.0])
# # a1 = np.array([0.07977774, 0.07406837,0.0614425,0.03782562,0.0])

# # E = max(abs(r-a1))

# # # 0.019975760000000002


# r = np.array([0.05980198198527513,0.05959887624729718,0.05850983305785109,0.05580885423315288,0.05089890342459491,0.043276147592111784,0.03250444850700472,0.01819657599816907,0.0])
# a2 = np.array([0.07017626,0.06876637,0.06640465,0.062406,0.05618576,0.04724611,0.03515385,0.01952276,0.0])

# E = max(abs(r-a2))
# # 0.010374278014724875

# # x [0.    0.125 0.25  0.375 0.5   0.625 0.75  0.875 1.   ]

# _______________________________________________________________

# import numpy as np

# array = np.arange(0, 1.001, 0.00390625)
# k = 0.625
# index = np.where(array == k)[0][0]
# print(f"The index of 0.625 is {index}")

